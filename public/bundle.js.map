{"version":3,"file":"bundle.js","mappings":"yLAAO,ICAKA,EDACC,EAAb,WAWI,c,4FAAc,S,UAXlB,O,EAAA,E,EAAA,mBAaI,SAAKC,GACDC,KAAKC,aAAaF,KAd1B,0BAiBI,SAAaA,GACT,IAAIG,EAAO,EACPC,EAAQ,EACRC,EAAK,EACLC,EAAO,EAEXC,SAASC,iBAAiB,WAAW,SAACC,GAClC,OAAQA,EAAMC,KACV,IAAK,IACDP,GAAQ,EACR,MACJ,IAAK,IACDC,EAAQ,EACR,MACJ,IAAK,IACDC,GAAM,EACN,MACJ,IAAK,IACDC,EAAO,EAIfN,EAAOW,KAAK,iBAAkB,CAAEC,EAAGT,EAAOC,EAAOS,EAAGR,EAAKC,OAG7DC,SAASC,iBAAiB,SAAS,SAACC,GAChC,OAAQA,EAAMC,KACV,IAAK,IACDP,EAAO,EACP,MACJ,IAAK,IACDC,EAAQ,EACR,MACJ,IAAK,IACDC,EAAK,EACL,MACJ,IAAK,IACDC,EAAO,EAIfN,EAAOW,KAAK,iBAAkB,CAAEC,EAAGT,EAAOC,EAAOS,EAAGR,EAAKC,U,EA1DrE,0BAGI,WAKI,OAJKP,EAASe,WACVf,EAASe,SAAW,IAAIf,GAGrBA,EAASe,Y,8BARxB,M,SCAYhB,GAAAA,EAAAA,QAAAA,UAAAA,EAAAA,YAAAA,UAAAA,EAAAA,UAAAA,U,CAAAA,IAAAA,EAAAA,K,sKCIL,ICADiB,EDAN,WAcI,c,4FAAc,S,UAdlB,O,EAAA,E,EAAA,0BAGI,WAKI,OAJKC,EAASF,WACVE,EAASF,SAAW,IAAIE,GAGrBA,EAASF,a,EARxB,mBAgBI,WACIb,KAAKgB,OAASV,SAASW,eAAe,UACtCjB,KAAKkB,IAAMlB,KAAKgB,OAAOG,WAAW,MAElCnB,KAAKgB,OAAOI,OEvBF,IFwBVpB,KAAKgB,OAAOK,MEvBH,MFEjB,wBAwBI,SAAWC,GACPtB,KAAKuB,YAAYD,GACjBtB,KAAKwB,WAAWF,GAChBtB,KAAKyB,aAAaH,KA3B1B,yBA8BI,SAAoBA,GAChBtB,KAAKkB,IAAIQ,UAAY7B,EAAO8B,QAC5B3B,KAAKkB,IAAIU,SAAS,EAAG,EAAG5B,KAAKgB,OAAOK,MAAOrB,KAAKgB,OAAOI,UAhC/D,wBAmCI,SAAmBE,GACf,IAAMO,EAAOP,EAAMO,KAAK,GAClBC,EAAQ9B,KAAKgB,OAAOK,MAAQC,EAAMS,SAClCC,EAAQhC,KAAKgB,OAAOI,OAASE,EAAMS,SAEzC/B,KAAKkB,IAAIQ,UAAY7B,EAAOoC,UAC5BjC,KAAKkB,IAAIU,SAASC,EAAKlB,EAAImB,EAAOD,EAAKjB,EAAIoB,EAAOF,EAAOE,KAzCjE,0BA4CI,SAAqBV,GAA2B,WACtCQ,EAAQ9B,KAAKgB,OAAOK,MAAQC,EAAMS,SAClCC,EAAQhC,KAAKgB,OAAOI,OAASE,EAAMS,SAEzCT,EAAMY,QAAQC,SAAQ,SAACC,GACnB,EAAKlB,IAAIQ,UAAY7B,EAAOwC,YAC5B,EAAKnB,IAAIU,SAASQ,EAAOE,IAAI3B,EAAImB,EAAOM,EAAOE,IAAI1B,EAAIoB,EAAOF,EAAOE,W,2BAlDjF,KCA0BO,cACpBC,EAAW1C,EAASyC,cAGpBxC,EAAS0C,GAAG,KAElB1C,EAAO2C,GAAG,eACV,WACI3C,EAAOW,KAAK,eAAgB,iBAGhCX,EAAO2C,GAAG,aACV,SAAyBC,GACrB,IAAMC,EAA0BC,KAAKC,MAAMH,GAC3CI,QAAQC,IAAIJ,GACZK,uBAAsB,kBAAMnC,EAASoC,WAAWN,SAGpDJ,EAASW,KAAKpD,GACde,EAASqC,Q","sources":["webpack://browser-game/./src/controls.ts","webpack://browser-game/./src/enums/colors.enum.ts","webpack://browser-game/./src/renderer.ts","webpack://browser-game/./src/index.ts","webpack://browser-game/./src/consts/config.const.ts"],"sourcesContent":["export class Controls {\r\n    private static instance: typeof Controls.prototype;\r\n\r\n    public static getInstance(): typeof Controls.prototype {\r\n        if (!Controls.instance) {\r\n            Controls.instance = new Controls();\r\n        }\r\n\r\n        return Controls.instance;\r\n    }\r\n\r\n    constructor() { }\r\n\r\n    init(socket: any): void {\r\n        this.initMovement(socket);\r\n    }\r\n\r\n    initMovement(socket: any): void {\r\n        let left = 0;\r\n        let right = 0;\r\n        let up = 0;\r\n        let down = 0;\r\n\r\n        document.addEventListener('keydown', (event) => {\r\n            switch (event.key) {\r\n                case 'a':\r\n                    left = -1;\r\n                    break;\r\n                case 'd':\r\n                    right = 1;\r\n                    break;\r\n                case 'w':\r\n                    up = -1;\r\n                    break;\r\n                case 's':\r\n                    down = 1;\r\n                    break;\r\n            }\r\n\r\n            socket.emit('velocityChange', { x: left + right, y: up + down });\r\n        });\r\n\r\n        document.addEventListener('keyup', (event) => {\r\n            switch (event.key) {\r\n                case 'a':\r\n                    left = 0;\r\n                    break;\r\n                case 'd':\r\n                    right = 0;\r\n                    break;\r\n                case 'w':\r\n                    up = 0;\r\n                    break;\r\n                case 's':\r\n                    down = 0;\r\n                    break;\r\n            }\r\n\r\n            socket.emit('velocityChange', { x: left + right, y: up + down });\r\n        });\r\n    }\r\n}\r\n","export enum Colors {\r\n    BgColor = '#231f20',\r\n    PlayerColor = '#c2c2c2',\r\n    ItemColor = '#e66916'\r\n}","import { Colors } from \"./enums/colors.enum\";\r\nimport { Config } from \"./consts/config.const\";\r\nimport { GameStateDto } from \"./models/game-state-dto.model\";\r\n\r\nexport class Renderer {\r\n    private static instance: typeof Renderer.prototype;\r\n\r\n    public static getInstance(): typeof Renderer.prototype {\r\n        if (!Renderer.instance) {\r\n            Renderer.instance = new Renderer();\r\n        }\r\n\r\n        return Renderer.instance;\r\n    }\r\n\r\n    private canvas: HTMLCanvasElement;\r\n    private ctx: CanvasRenderingContext2D;\r\n\r\n    constructor() { }\r\n\r\n    init(): void {\r\n        this.canvas = document.getElementById('canvas') as HTMLCanvasElement;\r\n        this.ctx = this.canvas.getContext('2d');\r\n\r\n        this.canvas.height = Config.screenHeight;\r\n        this.canvas.width = Config.screenWidth;\r\n    }\r\n\r\n    renderGame(state: GameStateDto): void {\r\n        this.renderWorld(state);\r\n        this.renderFood(state);\r\n        this.renderPlayer(state);\r\n    }\r\n\r\n    private renderWorld(state: GameStateDto): void {\r\n        this.ctx.fillStyle = Colors.BgColor;\r\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    private renderFood(state: GameStateDto): void {\r\n        const food = state.food[0];\r\n        const sizeW = this.canvas.width / state.gridSize;\r\n        const sizeH = this.canvas.height / state.gridSize;\r\n\r\n        this.ctx.fillStyle = Colors.ItemColor;\r\n        this.ctx.fillRect(food.x * sizeW, food.y * sizeH, sizeW, sizeH);\r\n    }\r\n\r\n    private renderPlayer(state: GameStateDto): void {\r\n        const sizeW = this.canvas.width / state.gridSize;\r\n        const sizeH = this.canvas.height / state.gridSize;\r\n\r\n        state.players.forEach((player) => {\r\n            this.ctx.fillStyle = Colors.PlayerColor;\r\n            this.ctx.fillRect(player.pos.x * sizeW, player.pos.y * sizeH, sizeW, sizeH);\r\n        })\r\n    }\r\n}\r\n","import { GameStateDto } from \"./models/game-state-dto.model\";\r\nimport { Controls } from \"./controls\";\r\nimport { Renderer } from \"./renderer\";\r\n\r\nconst renderer = Renderer.getInstance();\r\nconst controls = Controls.getInstance();\r\n\r\n//@ts-ignore\r\nconst socket = io('/');\r\n\r\nsocket.on('nameRequest', nameResponse);\r\nfunction nameResponse(): void {\r\n    socket.emit('nameResponse', 'MyNickname');\r\n}\r\n\r\nsocket.on('gameState', handleGameState);\r\nfunction handleGameState(gameStateDto: string) {\r\n    const gameState: GameStateDto = JSON.parse(gameStateDto);\r\n    console.log(gameState);\r\n    requestAnimationFrame(() => renderer.renderGame(gameState));\r\n}\r\n\r\ncontrols.init(socket);\r\nrenderer.init();","export const Config = {\r\n    screenHeight: 600,\r\n    screenWidth: 600\r\n}"],"names":["Colors","Controls","socket","this","initMovement","left","right","up","down","document","addEventListener","event","key","emit","x","y","instance","renderer","Renderer","canvas","getElementById","ctx","getContext","height","width","state","renderWorld","renderFood","renderPlayer","fillStyle","BgColor","fillRect","food","sizeW","gridSize","sizeH","ItemColor","players","forEach","player","PlayerColor","pos","getInstance","controls","io","on","gameStateDto","gameState","JSON","parse","console","log","requestAnimationFrame","renderGame","init"],"sourceRoot":""}