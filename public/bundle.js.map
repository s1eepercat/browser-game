{"version":3,"file":"bundle.js","mappings":"yLAAO,ICAKA,EDACC,EAAb,WAiBI,a,qGAAc,S,EANe,CAAC,GAAI,GAAI,GAAI,K,EAM5B,oB,sBAAA,K,uDAAA,K,eAjBlB,O,EAAA,E,EAAA,mBAmBI,SAAKC,GAAmB,WACpBC,SAASC,iBAAiB,WAAW,SAACC,GAC9B,EAAKC,UAAUC,SAASF,EAAMG,UAC9BN,EAAOO,KAAK,QAAS,CACjBC,KAAM,UACNF,QAASH,EAAMG,aAK3BL,SAASC,iBAAiB,SAAS,SAACC,GAC5B,EAAKC,UAAUC,SAASF,EAAMG,UAC9BN,EAAOO,KAAK,QAAS,CACjBC,KAAM,QACNF,QAASH,EAAMG,gB,EAjCnC,0BAGI,WAKI,OAJKP,EAAWU,WACZV,EAAWU,SAAW,IAAIV,GAGvBA,EAAWU,Y,8BAR1B,M,SCAYX,GAAAA,EAAAA,QAAAA,UAAAA,EAAAA,YAAAA,UAAAA,EAAAA,UAAAA,U,CAAAA,IAAAA,EAAAA,K,sKCIL,ICDDY,EDCN,WAcI,c,4FAAc,S,UAdlB,O,EAAA,E,EAAA,0BAGI,WAKI,OAJKC,EAASF,WACVE,EAASF,SAAW,IAAIE,GAGrBA,EAASF,a,EARxB,mBAgBI,WACIG,KAAKC,OAASZ,SAASa,eAAe,UACtCF,KAAKG,IAAMH,KAAKC,OAAOG,WAAW,MAElCJ,KAAKC,OAAOI,OEvBH,IFwBTL,KAAKC,OAAOK,MEvBJ,MFEhB,wBAwBI,SAAWC,GACPP,KAAKQ,YAAYD,GACjBP,KAAKS,WAAWF,GAChBP,KAAKU,aAAaH,KA3B1B,yBA8BI,SAAoBA,GAChBP,KAAKG,IAAIQ,UAAYzB,EAAO0B,QAC5BZ,KAAKG,IAAIU,SAAS,EAAG,EAAGb,KAAKC,OAAOK,MAAON,KAAKC,OAAOI,QAEvDL,KAAKG,IAAIQ,UAAYzB,EAAO0B,QAC5BZ,KAAKG,IAAIU,SAAS,EAAG,EAAGb,KAAKC,OAAOK,MAAON,KAAKC,OAAOI,UAnC/D,wBAsCI,SAAmBE,GACf,IAAMO,EAAOP,EAAMO,KAAK,GAClBC,EAAQf,KAAKC,OAAOK,MAAQC,EAAMS,SAClCC,EAAQjB,KAAKC,OAAOI,OAASE,EAAMS,SAEzChB,KAAKG,IAAIQ,UAAYzB,EAAOgC,UAC5BlB,KAAKG,IAAIU,SAASC,EAAKK,EAAIJ,EAAOD,EAAKM,EAAIH,EAAOF,EAAOE,KA5CjE,0BA+CI,SAAqBV,GAA2B,WACtCQ,EAAQf,KAAKC,OAAOK,MAAQC,EAAMS,SAClCC,EAAQjB,KAAKC,OAAOI,OAASE,EAAMS,SAEzCT,EAAMc,QAAQC,SAAQ,SAACC,GACnB,EAAKpB,IAAIQ,UAAYzB,EAAOsC,YAC5B,EAAKrB,IAAIU,SAASU,EAAOE,IAAIN,EAAIJ,EAAOQ,EAAOE,IAAIL,EAAIH,EAAOF,EAAOE,W,2BArDjF,KCD0BS,cACpBC,EAAaxC,EAAWuC,cAGxBtC,EAASwC,GAAG,KAElBxC,EAAOyC,GAAG,eAEV,WACIzC,EAAOO,KAAK,eAAgB,iBAGhCP,EAAOyC,GAAG,aAEV,SAAyBC,GACrBA,EAAYC,KAAKC,MAAMF,GACvBG,uBAAsB,kBAAMnC,EAASoC,WAAWJ,SAGpDH,EAAWQ,KAAK/C,GAChBU,EAASqC,Q","sources":["webpack://browser-game/./src/front-end/controller.ts","webpack://browser-game/./src/front-end/enums/colors.enum.ts","webpack://browser-game/./src/front-end/renderer.ts","webpack://browser-game/./src/front-end/index.ts","webpack://browser-game/./src/front-end/consts/config.const.ts"],"sourcesContent":["export class Controller {\r\n    private static instance: typeof Controller.prototype;\r\n\r\n    public static getInstance(): typeof Controller.prototype {\r\n        if (!Controller.instance) {\r\n            Controller.instance = new Controller();\r\n        }\r\n\r\n        return Controller.instance;\r\n    }\r\n\r\n    private readonly validKeys = [87, 83, 65, 68];\r\n    // 87 = W\r\n    // 65 = A\r\n    // 68 = D\r\n    // 83 = S\r\n\r\n    constructor() { }\r\n\r\n    init(socket: any): void {\r\n        document.addEventListener('keydown', (event) => {\r\n            if (this.validKeys.includes(event.keyCode)) {\r\n                socket.emit('input', {\r\n                    type: 'keydown',\r\n                    keyCode: event.keyCode\r\n                })\r\n            }\r\n        });\r\n\r\n        document.addEventListener('keyup', (event) => {\r\n            if (this.validKeys.includes(event.keyCode)) {\r\n                socket.emit('input', {\r\n                    type: 'keyup',\r\n                    keyCode: event.keyCode\r\n                })\r\n            }\r\n        });\r\n    }\r\n}\r\n","export enum Colors {\r\n    BgColor = '#231f20',\r\n    PlayerColor = '#c2c2c2',\r\n    ItemColor = '#e66916'\r\n}","import { Colors } from \"./enums/colors.enum\";\r\nimport { Config } from \"./consts/config.const\";\r\nimport { GameStateDto } from \"../shared/models/game-state-dto.model\";\r\n\r\nexport class Renderer {\r\n    private static instance: typeof Renderer.prototype;\r\n\r\n    public static getInstance(): typeof Renderer.prototype {\r\n        if (!Renderer.instance) {\r\n            Renderer.instance = new Renderer();\r\n        }\r\n\r\n        return Renderer.instance;\r\n    }\r\n\r\n    private canvas: HTMLCanvasElement;\r\n    private ctx: CanvasRenderingContext2D;\r\n\r\n    constructor() { }\r\n\r\n    init(): void {\r\n        this.canvas = document.getElementById('canvas') as HTMLCanvasElement;\r\n        this.ctx = this.canvas.getContext('2d');\r\n\r\n        this.canvas.height = Config.worldHeight;\r\n        this.canvas.width = Config.worldWidth;\r\n    }\r\n\r\n    renderGame(state: GameStateDto): void {\r\n        this.renderWorld(state);\r\n        this.renderFood(state);\r\n        this.renderPlayer(state);\r\n    }\r\n\r\n    private renderWorld(state: GameStateDto): void {\r\n        this.ctx.fillStyle = Colors.BgColor;\r\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n        this.ctx.fillStyle = Colors.BgColor;\r\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    private renderFood(state: GameStateDto): void {\r\n        const food = state.food[0];\r\n        const sizeW = this.canvas.width / state.gridSize;\r\n        const sizeH = this.canvas.height / state.gridSize;\r\n\r\n        this.ctx.fillStyle = Colors.ItemColor;\r\n        this.ctx.fillRect(food.x * sizeW, food.y * sizeH, sizeW, sizeH);\r\n    }\r\n\r\n    private renderPlayer(state: GameStateDto): void {\r\n        const sizeW = this.canvas.width / state.gridSize;\r\n        const sizeH = this.canvas.height / state.gridSize;\r\n\r\n        state.players.forEach((player) => {\r\n            this.ctx.fillStyle = Colors.PlayerColor;\r\n            this.ctx.fillRect(player.pos.x * sizeW, player.pos.y * sizeH, sizeW, sizeH);\r\n        })\r\n    }\r\n}\r\n","import { Controller } from \"./controller\";\r\nimport { Renderer } from \"./renderer\";\r\n\r\nconst renderer = Renderer.getInstance();\r\nconst controller = Controller.getInstance();\r\n\r\n//@ts-ignore\r\nconst socket = io('/');\r\n\r\nsocket.on('nameRequest', nameResponse);\r\n\r\nfunction nameResponse(): void {\r\n    socket.emit('nameResponse', 'MyNickname');\r\n}\r\n\r\nsocket.on('gameState', handleGameState);\r\n\r\nfunction handleGameState(gameState: any) {\r\n    gameState = JSON.parse(gameState);\r\n    requestAnimationFrame(() => renderer.renderGame(gameState))\r\n}\r\n\r\ncontroller.init(socket);\r\nrenderer.init();","export const Config = {\r\n    worldHeight: 600,\r\n    worldWidth: 600\r\n}"],"names":["Colors","Controller","socket","document","addEventListener","event","validKeys","includes","keyCode","emit","type","instance","renderer","Renderer","this","canvas","getElementById","ctx","getContext","height","width","state","renderWorld","renderFood","renderPlayer","fillStyle","BgColor","fillRect","food","sizeW","gridSize","sizeH","ItemColor","x","y","players","forEach","player","PlayerColor","pos","getInstance","controller","io","on","gameState","JSON","parse","requestAnimationFrame","renderGame","init"],"sourceRoot":""}