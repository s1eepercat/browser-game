{"version":3,"file":"bundle.js","mappings":"yLAAO,ICAKA,EDACC,EAAb,WAWI,c,4FAAc,S,UAXlB,O,EAAA,E,EAAA,0BAGI,WAKI,OAJKA,EAAWC,WACZD,EAAWC,SAAW,IAAID,GAGvBA,EAAWC,a,EAR1B,mBAaI,WACIC,SAASC,iBAAiB,UAAWC,KAAKC,SAC1CH,SAASC,iBAAiB,QAASC,KAAKE,SAfhD,qBAkBI,SAAgBC,GACZC,QAAQC,IAAIF,EAAOG,QAAS,UAnBpC,mBAsBI,SAAcH,GACVC,QAAQC,IAAIF,EAAOG,QAAS,W,2BAvBpC,M,SCAYX,GAAAA,EAAAA,QAAAA,UAAAA,EAAAA,YAAAA,UAAAA,EAAAA,UAAAA,U,CAAAA,IAAAA,EAAAA,K,sKCIL,ICDDY,EDCN,WAcI,c,4FAAc,S,UAdlB,O,EAAA,E,EAAA,0BAGI,WAKI,OAJKC,EAASX,WACVW,EAASX,SAAW,IAAIW,GAGrBA,EAASX,a,EARxB,mBAgBI,WACIG,KAAKS,OAASX,SAASY,eAAe,UACtCV,KAAKW,IAAMX,KAAKS,OAAOG,WAAW,MAElCZ,KAAKS,OAAOI,OEvBH,IFwBTb,KAAKS,OAAOK,MEvBJ,MFEhB,wBAwBI,SAAWC,GACPf,KAAKgB,YAAYD,GACjBf,KAAKiB,WAAWF,GAChBf,KAAKkB,aAAaH,KA3B1B,yBA8BI,SAAoBA,GAChBf,KAAKW,IAAIQ,UAAYxB,EAAOyB,QAC5BpB,KAAKW,IAAIU,SAAS,EAAG,EAAGrB,KAAKS,OAAOK,MAAOd,KAAKS,OAAOI,QAEvDb,KAAKW,IAAIQ,UAAYxB,EAAOyB,QAC5BpB,KAAKW,IAAIU,SAAS,EAAG,EAAGrB,KAAKS,OAAOK,MAAOd,KAAKS,OAAOI,UAnC/D,wBAsCI,SAAmBE,GACf,IAAMO,EAAOP,EAAMO,KAAK,GAClBC,EAAQvB,KAAKS,OAAOK,MAAQC,EAAMS,SAClCC,EAAQzB,KAAKS,OAAOI,OAASE,EAAMS,SAEzCxB,KAAKW,IAAIQ,UAAYxB,EAAO+B,UAC5B1B,KAAKW,IAAIU,SAASC,EAAKK,EAAIJ,EAAOD,EAAKM,EAAIH,EAAOF,EAAOE,KA5CjE,0BA+CI,SAAqBV,GAA2B,WACtCQ,EAAQvB,KAAKS,OAAOK,MAAQC,EAAMS,SAClCC,EAAQzB,KAAKS,OAAOI,OAASE,EAAMS,SAEzCT,EAAMc,QAAQC,SAAQ,SAACC,GACnB,EAAKpB,IAAIQ,UAAYxB,EAAOqC,YAC5B,EAAKrB,IAAIU,SAASU,EAAOE,IAAIN,EAAIJ,EAAOQ,EAAOE,IAAIL,EAAIH,EAAOF,EAAOE,W,2BArDjF,KCD0BS,cACpBC,EAAavC,EAAWsC,cAE9B3B,EAAS6B,OACTD,EAAWC,OAGX,IAAMC,EAASC,GAAG,KAElBD,EAAOE,GAAG,eAEV,WACIF,EAAOG,KAAK,eAAgB,iBAGhCH,EAAOE,GAAG,aAEV,SAAyBE,GACrBA,EAAYC,KAAKC,MAAMF,GACvBG,uBAAsB,kBAAMrC,EAASsC,WAAWJ,U","sources":["webpack://browser-game/./src/front-end/controller.ts","webpack://browser-game/./src/front-end/enums/colors.enum.ts","webpack://browser-game/./src/front-end/renderer.ts","webpack://browser-game/./src/front-end/index.ts","webpack://browser-game/./src/front-end/consts/config.const.ts"],"sourcesContent":["export class Controller {\r\n    private static instance: typeof Controller.prototype;\r\n\r\n    public static getInstance(): typeof Controller.prototype {\r\n        if (!Controller.instance) {\r\n            Controller.instance = new Controller();\r\n        }\r\n\r\n        return Controller.instance;\r\n    }\r\n\r\n    constructor() { }\r\n\r\n    init(): void {\r\n        document.addEventListener('keydown', this.keyDown);\r\n        document.addEventListener('keyup', this.keyUp);\r\n    }\r\n\r\n    private keyDown($event: KeyboardEvent): void {\r\n        console.log($event.keyCode, 'down');\r\n    }\r\n\r\n    private keyUp($event: KeyboardEvent): void {\r\n        console.log($event.keyCode, 'up')\r\n    }\r\n}","export enum Colors {\r\n    BgColor = '#231f20',\r\n    PlayerColor = '#c2c2c2',\r\n    ItemColor = '#e66916'\r\n}","import { Colors } from \"./enums/colors.enum\";\r\nimport { Config } from \"./consts/config.const\";\r\nimport { GameStateDto } from \"../shared/models/game-state-dto.model\";\r\n\r\nexport class Renderer {\r\n    private static instance: typeof Renderer.prototype;\r\n\r\n    public static getInstance(): typeof Renderer.prototype {\r\n        if (!Renderer.instance) {\r\n            Renderer.instance = new Renderer();\r\n        }\r\n\r\n        return Renderer.instance;\r\n    }\r\n\r\n    private canvas: HTMLCanvasElement;\r\n    private ctx: CanvasRenderingContext2D;\r\n\r\n    constructor() { }\r\n\r\n    init(): void {\r\n        this.canvas = document.getElementById('canvas') as HTMLCanvasElement;\r\n        this.ctx = this.canvas.getContext('2d');\r\n\r\n        this.canvas.height = Config.worldHeight;\r\n        this.canvas.width = Config.worldWidth;\r\n    }\r\n\r\n    renderGame(state: GameStateDto): void {\r\n        this.renderWorld(state);\r\n        this.renderFood(state);\r\n        this.renderPlayer(state);\r\n    }\r\n\r\n    private renderWorld(state: GameStateDto): void {\r\n        this.ctx.fillStyle = Colors.BgColor;\r\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n        this.ctx.fillStyle = Colors.BgColor;\r\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    private renderFood(state: GameStateDto): void {\r\n        const food = state.food[0];\r\n        const sizeW = this.canvas.width / state.gridSize;\r\n        const sizeH = this.canvas.height / state.gridSize;\r\n\r\n        this.ctx.fillStyle = Colors.ItemColor;\r\n        this.ctx.fillRect(food.x * sizeW, food.y * sizeH, sizeW, sizeH);\r\n    }\r\n\r\n    private renderPlayer(state: GameStateDto): void {\r\n        const sizeW = this.canvas.width / state.gridSize;\r\n        const sizeH = this.canvas.height / state.gridSize;\r\n\r\n        state.players.forEach((player) => {\r\n            this.ctx.fillStyle = Colors.PlayerColor;\r\n            this.ctx.fillRect(player.pos.x * sizeW, player.pos.y * sizeH, sizeW, sizeH);\r\n        })\r\n    }\r\n}\r\n","import { Controller } from \"./controller\";\r\nimport { Renderer } from \"./renderer\";\r\n\r\nconst renderer = Renderer.getInstance();\r\nconst controller = Controller.getInstance();\r\n\r\nrenderer.init();\r\ncontroller.init();\r\n\r\n//@ts-ignore\r\nconst socket = io('/');\r\n\r\nsocket.on('nameRequest', nameResponse);\r\n\r\nfunction nameResponse(): void {\r\n    socket.emit('nameResponse', 'MyNickname');\r\n}\r\n\r\nsocket.on('gameState', handleGameState);\r\n\r\nfunction handleGameState(gameState: any) {\r\n    gameState = JSON.parse(gameState);\r\n    requestAnimationFrame(() => renderer.renderGame(gameState))\r\n}","export const Config = {\r\n    worldHeight: 600,\r\n    worldWidth: 600\r\n}"],"names":["Colors","Controller","instance","document","addEventListener","this","keyDown","keyUp","$event","console","log","keyCode","renderer","Renderer","canvas","getElementById","ctx","getContext","height","width","state","renderWorld","renderFood","renderPlayer","fillStyle","BgColor","fillRect","food","sizeW","gridSize","sizeH","ItemColor","x","y","players","forEach","player","PlayerColor","pos","getInstance","controller","init","socket","io","on","emit","gameState","JSON","parse","requestAnimationFrame","renderGame"],"sourceRoot":""}