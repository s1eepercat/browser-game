{"version":3,"file":"bundle.js","mappings":"yLAAO,ICAKA,EDACC,EAAb,WAWI,c,4FAAc,S,UAXlB,O,EAAA,E,EAAA,mBAaI,SAAKC,GACD,IAAIC,EAAO,EACPC,EAAQ,EACRC,EAAK,EACLC,EAAO,EAEXC,SAASC,iBAAiB,WAAW,SAACC,GAClC,OAAQA,EAAMC,KACV,IAAK,IACDP,GAAQ,EACR,MACJ,IAAK,IACDC,EAAQ,EACR,MACJ,IAAK,IACDC,GAAM,EACN,MACJ,IAAK,IACDC,EAAO,EAIfJ,EAAOS,KAAK,QAAS,CAAEC,EAAGT,EAAOC,EAAOS,EAAGR,EAAKC,OAGpDC,SAASC,iBAAiB,SAAS,SAACC,GAChC,OAAQA,EAAMC,KACV,IAAK,IACDP,EAAO,EACP,MACJ,IAAK,IACDC,EAAQ,EACR,MACJ,IAAK,IACDC,EAAK,EACL,MACJ,IAAK,IACDC,EAAO,EAIfJ,EAAOS,KAAK,QAAS,CAAEC,EAAGT,EAAOC,EAAOS,EAAGR,EAAKC,U,EAtD5D,0BAGI,WAKI,OAJKL,EAAWa,WACZb,EAAWa,SAAW,IAAIb,GAGvBA,EAAWa,Y,8BAR1B,M,SCAYd,GAAAA,EAAAA,QAAAA,UAAAA,EAAAA,YAAAA,UAAAA,EAAAA,UAAAA,U,CAAAA,IAAAA,EAAAA,K,sKCIL,ICADe,EDAN,WAcI,c,4FAAc,S,UAdlB,O,EAAA,E,EAAA,0BAGI,WAKI,OAJKC,EAASF,WACVE,EAASF,SAAW,IAAIE,GAGrBA,EAASF,a,EARxB,mBAgBI,WACIG,KAAKC,OAASX,SAASY,eAAe,UACtCF,KAAKG,IAAMH,KAAKC,OAAOG,WAAW,MAElCJ,KAAKC,OAAOI,OEvBH,IFwBTL,KAAKC,OAAOK,MEvBJ,MFEhB,wBAwBI,SAAWC,GACPP,KAAKQ,YAAYD,GACjBP,KAAKS,WAAWF,GAChBP,KAAKU,aAAaH,KA3B1B,yBA8BI,SAAoBA,GAChBP,KAAKG,IAAIQ,UAAY5B,EAAO6B,QAC5BZ,KAAKG,IAAIU,SAAS,EAAG,EAAGb,KAAKC,OAAOK,MAAON,KAAKC,OAAOI,QAEvDL,KAAKG,IAAIQ,UAAY5B,EAAO6B,QAC5BZ,KAAKG,IAAIU,SAAS,EAAG,EAAGb,KAAKC,OAAOK,MAAON,KAAKC,OAAOI,UAnC/D,wBAsCI,SAAmBE,GACf,IAAMO,EAAOP,EAAMO,KAAK,GAClBC,EAAQf,KAAKC,OAAOK,MAAQC,EAAMS,SAClCC,EAAQjB,KAAKC,OAAOI,OAASE,EAAMS,SAEzChB,KAAKG,IAAIQ,UAAY5B,EAAOmC,UAC5BlB,KAAKG,IAAIU,SAASC,EAAKnB,EAAIoB,EAAOD,EAAKlB,EAAIqB,EAAOF,EAAOE,KA5CjE,0BA+CI,SAAqBV,GAA2B,WACtCQ,EAAQf,KAAKC,OAAOK,MAAQC,EAAMS,SAClCC,EAAQjB,KAAKC,OAAOI,OAASE,EAAMS,SAEzCT,EAAMY,QAAQC,SAAQ,SAACC,GACnB,EAAKlB,IAAIQ,UAAY5B,EAAOuC,YAC5B,EAAKnB,IAAIU,SAASQ,EAAOE,IAAI5B,EAAIoB,EAAOM,EAAOE,IAAI3B,EAAIqB,EAAOF,EAAOE,W,2BArDjF,KCA0BO,cACpBC,EAAazC,EAAWwC,cAGxBvC,EAASyC,GAAG,KAElBzC,EAAO0C,GAAG,eACV,WACI1C,EAAOS,KAAK,eAAgB,iBAGhCT,EAAO0C,GAAG,aACV,SAAyBC,GACrB,IAAMC,EAA0BC,KAAKC,MAAMH,GAC3CI,uBAAsB,kBAAMlC,EAASmC,WAAWJ,SAGpDJ,EAAWS,KAAKjD,GAChBa,EAASoC,Q","sources":["webpack://browser-game/./src/front-end/controller.ts","webpack://browser-game/./src/front-end/enums/colors.enum.ts","webpack://browser-game/./src/front-end/renderer.ts","webpack://browser-game/./src/front-end/index.ts","webpack://browser-game/./src/front-end/consts/config.const.ts"],"sourcesContent":["export class Controller {\r\n    private static instance: typeof Controller.prototype;\r\n\r\n    public static getInstance(): typeof Controller.prototype {\r\n        if (!Controller.instance) {\r\n            Controller.instance = new Controller();\r\n        }\r\n\r\n        return Controller.instance;\r\n    }\r\n\r\n    constructor() { }\r\n\r\n    init(socket: any): void {\r\n        let left = 0;\r\n        let right = 0;\r\n        let up = 0;\r\n        let down = 0;\r\n\r\n        document.addEventListener('keydown', (event) => {\r\n            switch (event.key) {\r\n                case 'a':\r\n                    left = -1;\r\n                    break;\r\n                case 'd':\r\n                    right = 1;\r\n                    break;\r\n                case 'w':\r\n                    up = -1;\r\n                    break;\r\n                case 's':\r\n                    down = 1;\r\n                    break;\r\n            }\r\n\r\n            socket.emit('input', { x: left + right, y: up + down });\r\n        });\r\n\r\n        document.addEventListener('keyup', (event) => {\r\n            switch (event.key) {\r\n                case 'a':\r\n                    left = 0;\r\n                    break;\r\n                case 'd':\r\n                    right = 0;\r\n                    break;\r\n                case 'w':\r\n                    up = 0;\r\n                    break;\r\n                case 's':\r\n                    down = 0;\r\n                    break;\r\n            }\r\n\r\n            socket.emit('input', { x: left + right, y: up + down });\r\n        });\r\n    }\r\n}\r\n","export enum Colors {\r\n    BgColor = '#231f20',\r\n    PlayerColor = '#c2c2c2',\r\n    ItemColor = '#e66916'\r\n}","import { Colors } from \"./enums/colors.enum\";\r\nimport { Config } from \"./consts/config.const\";\r\nimport { GameStateDto } from \"../shared/models/game-state-dto.model\";\r\n\r\nexport class Renderer {\r\n    private static instance: typeof Renderer.prototype;\r\n\r\n    public static getInstance(): typeof Renderer.prototype {\r\n        if (!Renderer.instance) {\r\n            Renderer.instance = new Renderer();\r\n        }\r\n\r\n        return Renderer.instance;\r\n    }\r\n\r\n    private canvas: HTMLCanvasElement;\r\n    private ctx: CanvasRenderingContext2D;\r\n\r\n    constructor() { }\r\n\r\n    init(): void {\r\n        this.canvas = document.getElementById('canvas') as HTMLCanvasElement;\r\n        this.ctx = this.canvas.getContext('2d');\r\n\r\n        this.canvas.height = Config.worldHeight;\r\n        this.canvas.width = Config.worldWidth;\r\n    }\r\n\r\n    renderGame(state: GameStateDto): void {\r\n        this.renderWorld(state);\r\n        this.renderFood(state);\r\n        this.renderPlayer(state);\r\n    }\r\n\r\n    private renderWorld(state: GameStateDto): void {\r\n        this.ctx.fillStyle = Colors.BgColor;\r\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n        this.ctx.fillStyle = Colors.BgColor;\r\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    private renderFood(state: GameStateDto): void {\r\n        const food = state.food[0];\r\n        const sizeW = this.canvas.width / state.gridSize;\r\n        const sizeH = this.canvas.height / state.gridSize;\r\n\r\n        this.ctx.fillStyle = Colors.ItemColor;\r\n        this.ctx.fillRect(food.x * sizeW, food.y * sizeH, sizeW, sizeH);\r\n    }\r\n\r\n    private renderPlayer(state: GameStateDto): void {\r\n        const sizeW = this.canvas.width / state.gridSize;\r\n        const sizeH = this.canvas.height / state.gridSize;\r\n\r\n        state.players.forEach((player) => {\r\n            this.ctx.fillStyle = Colors.PlayerColor;\r\n            this.ctx.fillRect(player.pos.x * sizeW, player.pos.y * sizeH, sizeW, sizeH);\r\n        })\r\n    }\r\n}\r\n","import { GameStateDto } from \"../shared/models/game-state-dto.model\";\r\nimport { Controller } from \"./controller\";\r\nimport { Renderer } from \"./renderer\";\r\n\r\nconst renderer = Renderer.getInstance();\r\nconst controller = Controller.getInstance();\r\n\r\n//@ts-ignore\r\nconst socket = io('/');\r\n\r\nsocket.on('nameRequest', nameResponse);\r\nfunction nameResponse(): void {\r\n    socket.emit('nameResponse', 'MyNickname');\r\n}\r\n\r\nsocket.on('gameState', handleGameState);\r\nfunction handleGameState(gameStateDto: string) {\r\n    const gameState: GameStateDto = JSON.parse(gameStateDto)\r\n    requestAnimationFrame(() => renderer.renderGame(gameState))\r\n}\r\n\r\ncontroller.init(socket);\r\nrenderer.init();","export const Config = {\r\n    worldHeight: 600,\r\n    worldWidth: 600\r\n}"],"names":["Colors","Controller","socket","left","right","up","down","document","addEventListener","event","key","emit","x","y","instance","renderer","Renderer","this","canvas","getElementById","ctx","getContext","height","width","state","renderWorld","renderFood","renderPlayer","fillStyle","BgColor","fillRect","food","sizeW","gridSize","sizeH","ItemColor","players","forEach","player","PlayerColor","pos","getInstance","controller","io","on","gameStateDto","gameState","JSON","parse","requestAnimationFrame","renderGame","init"],"sourceRoot":""}